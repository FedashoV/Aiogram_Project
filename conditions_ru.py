from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendMessage
from config import TOKEN

import keyboards_ru as kb
import handlers_ru as hd

bot = Bot(token=TOKEN)
con_router = Router()
pay = 0
timeout_cnt = 0


class Order(StatesGroup):
    name = State()
    room = State()
    time = State()
    papers = State()
    comment = State()
    document = State()


@con_router.message(F.text == "üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å üñ®Ô∏è")
async def user_name(message: Message, state: FSMContext):
    await state.set_state(Order.name)
    await message.answer('üó£ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup=kb.delete_delivery)


@con_router.message(Order.name)
async def user_room(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Order.room)
    await message.answer(f'üö™ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ—Ä–ø—É—Å\n\n'
                         f'<b><i>üí° –ü—Ä–∏–º–µ—Ä: 417 (2)</i></b>', reply_markup=kb.delete_delivery,
                         parse_mode='HTML')


@con_router.message(Order.room)
async def time(message: Message, state: FSMContext):
    await state.update_data(room=message.text)
    await state.set_state(Order.time)
    await message.answer('üïì –í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n'
                         f'<i>üí° –ü—Ä–∏–º–µ—Ä: 24.04.2024 (18:00)</i>', parse_mode='HTML',
                         reply_markup=kb.delete_delivery)
    await message.answer('üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É:',
                         reply_markup=kb.yandex_disk)


@con_router.message(Order.time)
async def count_of_paper(message: Message, state: FSMContext):
    await state.update_data(timing=message.text)
    await state.set_state(Order.papers)
    await message.answer('üóê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å',
                         reply_markup=kb.delete_delivery)


@con_router.message(Order.papers)
async def comment(message: Message, state: FSMContext):
    await state.update_data(paper=message.text)
    await state.set_state(Order.comment)
    await message.answer(f'üí¨ –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                         parse_mode='HTML', reply_markup=kb.keyboard_for_comment)


@con_router.message(Order.comment)
async def comm(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(Order.document)
    await message.answer(f'üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 10 —à—Ç—É–∫) <b>–û–î–ù–ò–ú</b> —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
                         parse_mode='HTML', reply_markup=kb.delete_delivery)


@con_router.message(Order.document)
async def payment(message: Message, state: FSMContext):
    full_information = await state.get_data()
    try:
        count = int(full_information["paper"])
        await pay_pay(message, state)

    except ValueError:
        await message.answer("‚ùå–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤! –°–æ–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏ —É–∫–∞–∂–∏—Ç–µ "
                             "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π!")
        await state.clear()
        await hd.starting(message)


@con_router.message(F.text == "–ö–û–î22548962152253–ö–û–î")
async def pay_pay(message: Message, state: FSMContext):
    global pay
    global timeout_cnt
    full_information = await state.get_data()
    paper_count = int(full_information["paper"])
    flag = False
    if 1 <= paper_count <= 3:
        pay = 10 * paper_count
        flag = True
    elif 4 <= paper_count <= 6:
        pay = 8 * paper_count
        flag = True
    elif 7 <= paper_count <= 9:
        pay = 7 * paper_count
        flag = True
    elif 10 <= paper_count <= 29:
        pay = 6 * paper_count
        flag = True
    elif 30 <= paper_count <= 1000000:
        pay = 5 * paper_count
        flag = True

    else:
        await message.answer("‚ùå–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤! –°–æ–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏ —É–∫–∞–∂–∏—Ç–µ "
                             "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π!")
        await state.clear()
        await hd.starting(message)

    if flag is True:
        if 0 < pay < 60:
            await message.answer(text='‚öôÔ∏è–û–±—Ä–∞–±–æ—Ç–∫–∞...–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb.payment1)
            await documentation(message, state)

        elif 60 <= pay < 1000000:
            await message.answer(text='‚öôÔ∏è–û–±—Ä–∞–±–æ—Ç–∫–∞...–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb.payment2)
            await documentation(message, state)

        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ—â—ë —Ä–∞–∑ –ª–∏–±–æ "
                                 "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


async def documentation(message: Message, state: FSMContext):
    global pay
    full_information = await state.get_data()
    await bot(SendMessage(chat_id=-1002193083153,
                          text=f'<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!!!!!</b>\n\n'
                               f'<b>–ò–ú–Ø:</b> {full_information["name"]}\n'
                               f'<b>–ö–û–ú–ù–ê–¢–ê:</b> {full_information["room"]}\n'
                               f'<b>–í–†–ï–ú–Ø: </b>{full_information["timing"]}\n\n'
                               f'<b>–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: </b>{full_information["comment"]}',
                          parse_mode='HTML'))
    await bot.forward_message(-1002193083153, message.from_user.id, message.message_id)
    await state.clear()



